Lex({ content_file = ../cross.mll ;
 content_name = Cross ;
 contents_contents =
 [
{
 sec_beg = 788 ; 
 sec_contents = 
[
Documentation(Cross references inside Caml files are kept in the following two 
   global tables, which keep the places where things are defined and
   used, to produce the final indexes.
)Code(971,
 [
CamlCode(type where = { w_filename : string; w_loc : int })]
)Code(1030,
 [
CamlCode(module Whereset = Set.Make(struct type t = where let compare = compare end))]
)Code(1107,
 [
CamlCode(type entry_type = 
  | Value
  | Constructor
  | Field
  | Type
  | Exception
  | Module
  | ModuleType
  | Class
  | Method
  | YaccEP
  | LexEP
  | RegExpr
  | Token)]
)Code(1418,
 [
CamlCode(type index_entry = { e_name : string; e_type : entry_type })]
)Code(1479,
 [
CamlCode(module Idmap = Map.Make(struct type t = index_entry let compare = compare end))]
)Code(1562,
 [
CamlCode(let defined = ref Idmap.empty
let used    = ref Idmap.empty)]
)Documentation([in_action] and [offset_action] helps us to find an approximation of the 
   right position in the file while parsing an action in a lex or yacc file.)Code(1780,
 [
CamlCode(let in_action = ref false
let offset_action = ref 0)]
)]
}{
 sec_beg = 1834 ; 
 sec_contents = 
[
Documentation(The function [add_global] is a generic function to add an entry in one 
    table. [add_def] is used to add the definition of an identifier (so in the
    table [defined]).)Code(2079,
 [
CamlCode(let add_global table k i =
  try
    let s = Idmap.find k !table in
    table := Idmap.add k (Whereset.add i s) !table
  with Not_found -> table := Idmap.add k (Whereset.singleton i) !table)]
)Code(2276,
 [
CamlCode(let current_file = ref "")]
)Code(2427,
 [
CamlCode(let current_location loc = 
  { w_filename = !current_file;
    w_loc = loc.loc_start + if (!in_action) then !offset_action else 0 })]
)Code(2608,
 [
CamlCode(let add_def loc t s =
  if String.length s > 1 then
    let e = { e_name = s; e_type = t } in
      add_global defined e (current_location loc))]
)]
}{
 sec_beg = 2754 ; 
 sec_contents = 
[
Documentation(Another table, [locals], keeps the bound variables, in order to
    distinguish them from global identifiers. Then the function [add_uses]
    registers that an identifier is used (in the table [used]), taking care 
    of the fact that it is not a bound variable (in the table [locals]).
    [add_uses_q] iters [add_uses] on a qualified identifier.)Code(3119,
 [
CamlCode(module Stringset = Set.Make(struct type t = string let compare = compare end))]
)Code(3204,
 [
CamlCode(let locals = ref Stringset.empty)]
)Code(3238,
 [
CamlCode(let reset_cross () =
  locals := Stringset.empty)]
)Code(3288,
 [
CamlCode(let add_local s =
  locals := Stringset.add s !locals)]
)Code(3343,
 [
CamlCode(let is_uppercase = function 'A'..'Z' -> true | _ -> false)]
)Code(3449,
 [
CamlCode(let add_uses loc t s =
  if String.length s > 1 && 
     not (is_keyword s) && not (Stringset.mem s !locals) 
  then
    let e = { e_name = s; e_type = t } in
    add_global used e (current_location loc))]
)Code(3655,
 [
CamlCode(let add_uses_q loc t q =
  let rec addmod = function
    | Lident s -> add_uses loc Module s
    | Ldot (q,s) -> addmod q; add_uses loc Module s
    | Lapply (q1,q2) -> addmod q1; addmod q2 
  in
  match q with
    | Lident s -> add_uses loc t s
    | Ldot (q,s) -> addmod q; add_uses loc t s
    | Lapply (q1,q2) -> addmod q1; addmod q2)]
)]
}{
 sec_beg = 3994 ; 
 sec_contents = 
[
Documentation(Some useful functions.)Code(4025,
 [
CamlCode(let iter_fst f = List.iter (fun x -> f (fst x)))]
)Code(4078,
 [
CamlCode(let iter_snd f = List.iter (fun x -> f (snd x)))]
)Code(4131,
 [
CamlCode(let option_iter f = function None -> ()  | Some x -> f x)]
)]
}{
 sec_beg = 4193 ; 
 sec_contents = 
[
Documentation(When traversing a pattern, we must collect all its identifiers, in order
    to declare them as bound variables (or definitions behind a \textsf{let}
    construction). That is the job of the function [ids_of_a_pattern].
    Then [pattern_for_def] declares all the identifiers of a pattern as
    new definitions.)Code(4515,
 [
CamlCode(let ids_of_a_pattern p =
  let r = ref [] in
  let add id = r := id :: !r in
  let rec pattern_d = function
    | Ppat_any -> ()
    | Ppat_var id -> add id
    | Ppat_alias (p,id) -> add id; pattern p
    | Ppat_constant _ -> ()
    | Ppat_tuple pl -> List.iter pattern pl
    | Ppat_construct (_,po,_) -> option_iter pattern po
    | Ppat_record l -> iter_snd pattern l
    | Ppat_array pl -> List.iter pattern pl
    | Ppat_or (p1,p2) -> pattern p1; pattern p2
    | Ppat_constraint (p,_) -> pattern p
  and pattern p = 
    pattern_d p.ppat_desc
  in
  pattern p; !r)]
)Code(5087,
 [
CamlCode(let pattern_for_def p =
  let loc = p.ppat_loc in
  let ids = ids_of_a_pattern p in
  List.iter (add_def loc Value) ids)]
)]
}{
 sec_beg = 5209 ; 
 sec_contents = 
[
Documentation(The following function locally adds some given variables to the set of
    bound variables, during the time of the application of a given function
    on a given argument.)Code(5389,
 [
CamlCode(let bind_variables ids f x =
  let save = !locals in
  List.iter add_local ids;
  f x;
  locals := save)]
)]
}{
 sec_beg = 5495 ; 
 sec_contents = 
[
Documentation(\textbf{Traversing of Caml abstract syntax trees.}
    Each type [t] in those abstract 
    syntax trees is associated to a function [tr_t] which traverses it,
    declaring the identifiers used and defined. Those types are defined
    in the Caml module interface [Paresetree.mli] contained in the Caml source
    distribution. 
 
    The following code is quite code, but systematic and easy to understand.
)]
}{
 sec_beg = 5913 ; 
 sec_contents = 
[
Documentation(Core types.)Code(5933,
 [
CamlCode(let rec tr_core_type t =
  tr_core_type_desc t.ptyp_loc t.ptyp_desc)]
)Code(6002,
 [
CamlCode(and tr_core_type_desc loc = function
  | Ptyp_any | Ptyp_var _ -> 
      ()
  | Ptyp_arrow (t1,t2) ->
      tr_core_type t1; tr_core_type t2
  | Ptyp_tuple tl ->
      List.iter tr_core_type tl
  | Ptyp_constr (q,tl) ->
      add_uses_q loc Type q; List.iter tr_core_type tl
  | Ptyp_object l ->
      List.iter tr_core_field_type l
  | Ptyp_class (id,l) ->
      add_uses_q loc Class id;
      List.iter tr_core_type l
  | Ptyp_alias (ct,_) -> 
      tr_core_type ct)]
)Code(6471,
 [
CamlCode(and tr_core_field_type ft =
  tr_core_field_desc ft.pfield_loc ft.pfield_desc)]
)Code(6550,
 [
CamlCode(and tr_core_field_desc loc = function
  | Pfield (id,ct) ->
      add_uses loc Method id;
      tr_core_type ct
  | Pfield_var -> ())]
)]
}{
 sec_beg = 6684 ; 
 sec_contents = 
[
Documentation(Type expressions for the class language.)Code(6733,
 [
CamlCode(let tr_class_infos f p =
  add_def p.pci_loc Class p.pci_name;
  f p.pci_expr)]
)]
}{
 sec_beg = 6812 ; 
 sec_contents = 
[
Documentation(Value expressions for the core language.)Code(6861,
 [
CamlCode(let bind_pattern f (p,e) =
  bind_variables (ids_of_a_pattern p) f e)]
)Code(6931,
 [
CamlCode(let bind_patterns f pl e =
  let ids = List.flatten (List.map ids_of_a_pattern pl) in
  bind_variables ids f e)]
)Code(7044,
 [
CamlCode(let rec tr_expression e = 
  tr_expression_desc e.pexp_loc e.pexp_desc)]
)Code(7116,
 [
CamlCode(and tr_expression_desc loc = function
  | Pexp_ident q -> 
      add_uses_q loc Value q
  | Pexp_apply (e,el) ->
      tr_expression e; List.iter tr_expression el
  | Pexp_ifthenelse (e1,e2,e3) -> 
      tr_expression e1; tr_expression e2; option_iter tr_expression e3
  | Pexp_sequence (e1,e2) ->
      tr_expression e1; tr_expression e2
  | Pexp_while (e1,e2) ->
      tr_expression e1; tr_expression e2
  | Pexp_tuple el ->
      List.iter tr_expression el
  | Pexp_construct (q,e,_) -> 
      add_uses_q loc Constructor q;
      option_iter tr_expression e
  | Pexp_function pel -> 
      List.iter (bind_pattern tr_expression) pel
  | Pexp_match (e,pel) -> 
      tr_expression e; List.iter (bind_pattern tr_expression) pel
  | Pexp_try (e,pel) -> 
      tr_expression e; List.iter (bind_pattern tr_expression) pel
  | Pexp_let (recf,pel,e) -> 
      let pl = List.map fst pel in
      if recf = Recursive then 
	iter_snd (bind_patterns tr_expression pl) pel
      else
	iter_snd tr_expression pel; 
      bind_patterns tr_expression pl e
  | Pexp_record (l,e) ->
      iter_fst (add_uses_q loc Field) l; iter_snd tr_expression l; 
      option_iter tr_expression e
  | Pexp_field (e,q) ->
      tr_expression e; add_uses_q loc Field q
  | Pexp_setfield (e1,q,e2) ->
      tr_expression e1; add_uses_q loc Field q; tr_expression e2
  | Pexp_array el ->
      List.iter tr_expression el
  | Pexp_for (i,e1,e2,_,e) ->
      tr_expression e1; tr_expression e2; bind_variables [i] tr_expression e
  | Pexp_constraint (e,t1,t2) ->
      tr_expression e; option_iter tr_core_type t1; option_iter tr_core_type t2
  | Pexp_when (e1,e2) ->
      tr_expression e1; tr_expression e2
  | Pexp_letmodule (x,m,e) ->
      tr_module_expr m; bind_variables [x] tr_expression e
  | Pexp_constant _ -> ()
  | Pexp_send (e,id) ->
      add_uses loc Method id; tr_expression e
  | Pexp_new id ->
      add_uses_q loc Class id
  | Pexp_setinstvar (id,e) ->
      add_uses loc Value id; tr_expression e
  | Pexp_override l ->
      iter_fst (add_uses loc Method) l; iter_snd tr_expression l)]
)]
}{
 sec_beg = 9191 ; 
 sec_contents = 
[
Documentation(Value descriptions.)Code(9219,
 [
CamlCode(and tr_value_description vd =
  tr_core_type vd.pval_type)]
)]
}{
 sec_beg = 9278 ; 
 sec_contents = 
[
Documentation(Type declarations.)Code(9305,
 [
CamlCode(and tr_type_declaration td =
  tr_type_kind td.ptype_loc td.ptype_kind)]
)Code(9377,
 [
CamlCode(and tr_type_kind loc = function
  | Ptype_abstract -> ()
  | Ptype_variant cl ->
      iter_fst (add_def loc Constructor) cl;
      iter_snd (List.iter tr_core_type) cl
  | Ptype_record fl ->
      List.iter (fun (f,_,t) -> add_def loc Field f; tr_core_type t) fl)]
)Code(9642,
 [
CamlCode(and tr_exception_declaration ed =
  List.iter tr_core_type ed)]
)]
}{
 sec_beg = 9705 ; 
 sec_contents = 
[
Documentation(Type expressions for the class language.)Code(9754,
 [
CamlCode(and tr_class_type c =
  tr_class_type_desc c.pcty_loc c.pcty_desc)]
)Code(9821,
 [
CamlCode(and tr_class_type_desc loc = function
  | Pcty_constr (id,l) ->
      add_uses_q loc Class id;
      List.iter tr_core_type l
  | Pcty_signature cs ->
      tr_class_signature cs
  | Pcty_fun (co,cl) ->
      tr_core_type co;
      tr_class_type cl)]
)Code(10071,
 [
CamlCode(and tr_class_signature (ct,l) = 
  tr_core_type ct;
  List.iter tr_class_type_field l)]
)Code(10158,
 [
CamlCode(and tr_class_type_field = function
  | Pctf_inher ct -> 
      tr_class_type ct
  | Pctf_val (id,_,ct,loc) ->
      add_def loc Value id;
      option_iter tr_core_type ct
  | Pctf_virt (id,_,ct,loc) ->
      add_def loc Method id;
      tr_core_type ct
  | Pctf_meth (id,_,ct,loc) ->
      add_def loc Method id;
      tr_core_type ct
  | Pctf_cstr (ct1,ct2,_) ->
      tr_core_type ct1;
      tr_core_type ct2)]
)Code(10571,
 [
CamlCode(and tr_class_description x = tr_class_infos tr_class_type x)]
)Code(10632,
 [
CamlCode(and tr_class_type_declaration x = tr_class_infos tr_class_type x)]
)]
}{
 sec_beg = 10699 ; 
 sec_contents = 
[
Documentation(Value expressions for the class language.)Code(10749,
 [
CamlCode(and tr_class_expr ce = tr_class_expr_desc ce.pcl_loc ce.pcl_desc)]
)Code(10815,
 [
CamlCode(and tr_class_expr_desc loc = function
  | Pcl_constr (id,l) ->
      add_uses_q loc Class id;
      List.iter tr_core_type l
  | Pcl_structure cs -> 
      tr_class_structure cs
  | Pcl_fun (p,ce) ->
      bind_variables (ids_of_a_pattern p) tr_class_expr ce
  | Pcl_apply (ce,l) ->
      tr_class_expr ce;
      List.iter tr_expression l
  | Pcl_let (recf,pel,ce) -> 
      let pl = List.map fst pel in
      if recf = Recursive then 
	iter_snd (bind_patterns tr_expression pl) pel
      else
	iter_snd tr_expression pel; 
      bind_patterns tr_class_expr pl ce
  | Pcl_constraint (ce,ct) ->
      tr_class_expr ce;
      tr_class_type ct)]
)Code(11457,
 [
CamlCode(and tr_class_structure (p,l) = 
  List.iter (fun f -> bind_pattern tr_class_field (p,f)) l)]
)Code(11549,
 [
CamlCode(and tr_class_field = function
  | Pcf_inher (ce,_) ->
      tr_class_expr ce
  | Pcf_val (id,_,e,loc) ->
      add_def loc Value id;
      tr_expression e
  | Pcf_virt(id,_,ct,loc) ->
      add_def loc Method id;
      tr_core_type ct
  | Pcf_meth (id,_,e,loc) ->
      add_def loc Method id;
      tr_expression e
  | Pcf_cstr (ct1,ct2,_) ->
      tr_core_type ct1;
      tr_core_type ct2
  | Pcf_let (recf,pel,_) -> 
      let pl = List.map fst pel in
      if recf = Recursive then 
	iter_snd (bind_patterns tr_expression pl) pel
      else
	iter_snd tr_expression pel
  | Pcf_init e ->
      tr_expression e)]
)Code(12162,
 [
CamlCode(and tr_class_declaration x = tr_class_infos tr_class_expr x)]
)]
}{
 sec_beg = 12223 ; 
 sec_contents = 
[
Documentation(Type expressions for the module language.)Code(12273,
 [
CamlCode(and tr_module_type mt =
  tr_module_type_desc mt.pmty_loc mt.pmty_desc)]
)Code(12345,
 [
CamlCode(and tr_module_type_desc loc = function
  | Pmty_ident id -> 
      add_uses_q loc ModuleType id
  | Pmty_signature s -> 
      tr_signature s
  | Pmty_functor (id,mt1,mt2) -> 
      tr_module_type mt1;
      bind_variables [id] tr_module_type mt2
  | Pmty_with (mt,cl) ->
      tr_module_type mt;
      List.iter 
	(fun (id,c) -> add_uses_q loc Type id; tr_with_constraint loc c) cl)]
)Code(12729,
 [
CamlCode(and tr_signature s =
  List.iter tr_signature_item s)]
)Code(12783,
 [
CamlCode(and tr_signature_item i =
  tr_signature_item_desc i.psig_loc i.psig_desc)]
)Code(12858,
 [
CamlCode(and tr_signature_item_desc loc = function
  | Psig_value (x,vd) ->
      add_def loc Value x; tr_value_description vd
  | Psig_type l ->
      iter_fst (add_def loc Type) l; iter_snd tr_type_declaration l
  | Psig_exception (id,ed) ->
      add_def loc Exception id; tr_exception_declaration ed
  | Psig_module (id,mt) ->
      add_def loc Module id; tr_module_type mt
  | Psig_modtype (id,mtd) ->
      add_def loc ModuleType id; tr_modtype_declaration mtd
  | Psig_open q -> 
      add_uses_q loc Module q
  | Psig_include mt ->
      tr_module_type mt
  | Psig_class l ->
      List.iter tr_class_description l
  | Psig_class_type l ->
      List.iter tr_class_type_declaration l)]
)Code(13542,
 [
CamlCode(and tr_modtype_declaration = function
  | Pmodtype_abstract -> ()
  | Pmodtype_manifest mt -> tr_module_type mt)]
)Code(13655,
 [
CamlCode(and tr_with_constraint loc = function
  | Pwith_type td -> tr_type_declaration td
  | Pwith_module id -> add_uses_q loc Module id)]
)]
}{
 sec_beg = 13786 ; 
 sec_contents = 
[
Documentation(Value expressions for the module language.)Code(13837,
 [
CamlCode(and tr_module_expr me =
  tr_module_expr_desc me.pmod_loc me.pmod_desc)]
)Code(13909,
 [
CamlCode(and tr_module_expr_desc loc = function
  | Pmod_ident id -> 
      add_uses_q loc Module id
  | Pmod_structure s -> 
      tr_structure s
  | Pmod_functor (id,mt,me) ->
      tr_module_type mt;
      bind_variables [id] tr_module_expr me
  | Pmod_apply (me1,me2) ->
      tr_module_expr me1;
      tr_module_expr me2
  | Pmod_constraint (me,mt) ->
      tr_module_expr me;
      tr_module_type mt)]
)Code(14307,
 [
CamlCode(and tr_structure l = 
  List.iter tr_structure_item l)]
)Code(14362,
 [
CamlCode(and tr_structure_item i =
  tr_structure_item_desc i.pstr_loc i.pstr_desc)]
)Code(14437,
 [
CamlCode(and tr_structure_item_desc loc = function
  | Pstr_eval e -> 
      tr_expression e
  | Pstr_value (_,pel) -> 
      iter_fst pattern_for_def pel; iter_snd tr_expression pel
  | Pstr_primitive (id,vd) ->
      add_def loc Value id; tr_value_description vd
  | Pstr_type l ->
      iter_fst (add_def loc Type) l; iter_snd tr_type_declaration l
  | Pstr_exception (id,ed) ->
      add_def loc Exception id; tr_exception_declaration ed
  | Pstr_module (id,me) ->
      add_def loc Module id; tr_module_expr me
  | Pstr_modtype (id,mt) ->
      add_def loc ModuleType id; tr_module_type mt
  | Pstr_open m -> 
      add_uses_q loc Module m
  | Pstr_class l -> 
      List.iter tr_class_declaration l
  | Pstr_class_type l -> 
      List.iter tr_class_type_declaration l)]
)Documentation(account for "double-percent")Code(15337,
 [
CamlCode(let percent_cpt = ref 0)]
)Documentation(account for "(*")Code(15385,
 [
CamlCode(let comment_cpt = ref 0)]
)Documentation(account for "{")Code(15432,
 [
CamlCode(let brace_cpt = ref 0)]
)Code(15455,
 [
CamlCode(let camlb = Buffer.create 8192)]
)Code(15487,
 [
CamlCode(let token_table = ref Stringset.empty)]
)]
}{
 sec_beg = 15526 ; 
 sec_contents = 
[
Documentation(This function replaces "dollar" by "space". The aim would be not to have problems with the parser
which uses the "dollar" as a special character.)Code(15679,
 [
CamlCode(let rec skip_dollar = function
    "" -> ""
  |str -> 
     let prem = (String.sub str 0 1) in
     let suite = String.sub str 1 ((String.length str)-1) in
       if prem = "$" 
       then " " ^(skip_dollar suite)
       else prem^(skip_dollar suite))]
)Code(15932,
 [
LexCode(})]
)Documentation(regular expressions)Code(15962,
 [
LexCode(let space = [' ' '\t']
let lowercase = ['a'-'z' '\223'-'\246' '\248'-'\255' '_']
let uppercase = ['A'-'Z' '\192'-'\214' '\216'-'\222']
let identchar = 
  ['A'-'Z' 'a'-'z' '_' '\192'-'\214' '\216'-'\246' '\248'-'\255' '\'' '0'-'9']
let identifier = (lowercase | uppercase) identchar*)]
)]
}{
 sec_beg = 16247 ; 
 sec_contents = 
[
Documentation(LEX Analyser)Code(16805,
 [
LexCode(rule index_lex = parse
  | "rule" | "and" 
	{)CamlCode( (* look for an identifier name *)
	  index_lex_ident lexbuf;
	  index_lex lexbuf;
	})LexCode(
  | "let" {)CamlCode( get_lex_defs lexbuf; index_lex lexbuf; })LexCode(
  | "\""
  | "|"
  | "'"   {)CamlCode( ignore_regexpr lexbuf; index_lex lexbuf; })LexCode(
  | "{"   {)CamlCode( in_action := true; offset_action := (lexeme_start lexbuf); (* we enter an action *)
	    incr brace_cpt; Buffer.clear camlb; caml_braces lexbuf;
	    index_lex lexbuf; })LexCode(
  | "(*"  {)CamlCode( incr comment_cpt ; ignore_caml_comments lexbuf; index_lex lexbuf; })LexCode(
  | eof   {)CamlCode( () })LexCode(
  | _     {)CamlCode( index_lex lexbuf; })]
)Code(17373,
 [
LexCode(and index_lex_ident = parse
  | "parse" {)CamlCode( () })LexCode(
  | identifier
      {)CamlCode(
	(* add to the index *)
	let entry_pt = lexeme lexbuf in
	let loc = { Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) } in
	  add_def loc LexEP entry_pt;
	index_lex_ident lexbuf;
      })LexCode(
  | "(*" {)CamlCode(  incr comment_cpt ; ignore_caml_comments lexbuf; index_lex_ident lexbuf; })LexCode(
  | eof  {)CamlCode( () })LexCode(
  | _    {)CamlCode( index_lex_ident lexbuf; })]
)]
}{
 sec_beg = 17878 ; 
 sec_contents = 
[
Documentation(YACC Analyser)Code(18285,
 [
LexCode(and index_yacc = parse
  | "%%"
      {)CamlCode(
	incr percent_cpt;
	(if (!percent_cpt=1)
	then index_yacc_ident lexbuf
	else 
	  if (!percent_cpt>1) 
	  then 
	    begin
	      in_action := true; offset_action := (lexeme_start lexbuf); (* we enter in a Caml part *)
	      Buffer.clear camlb;
	      caml_trailer lexbuf
	    end);
	index_yacc lexbuf;
      })LexCode(
  | ";"   {)CamlCode( index_yacc_ident lexbuf; index_yacc lexbuf; })LexCode(
  | "{"   {)CamlCode( in_action := true; offset_action := (lexeme_start lexbuf); (* we enter an action *)
	    incr brace_cpt ; Buffer.clear camlb; caml_braces lexbuf; index_yacc lexbuf; })LexCode(
  | "%token" | "%nonassoc"
  | "%right" | "%left" {)CamlCode( index_yacc_token lexbuf; index_yacc lexbuf; })LexCode(
  | "%{"  {)CamlCode( in_action := true; offset_action := (lexeme_start lexbuf); (* we enter an action *)
	    Buffer.clear camlb ; header_braces lexbuf; index_yacc lexbuf; })LexCode(
  | "/*"  {)CamlCode( ignore_yacc_comments lexbuf; index_yacc lexbuf; })LexCode(
  | eof   {)CamlCode( () })LexCode(
  | _     {)CamlCode( index_yacc lexbuf; })]
)Code(19299,
 [
LexCode(and index_yacc_ident = parse 
  | space* identifier space* ":"
      {)CamlCode(
	let lxb = from_string(lexeme lexbuf) in
	let ident = enleve_blanc_pipe_dp lxb in
	(* add to the index *)
	let loc = { Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) }
	in
	  add_def loc YaccEP ident;
	  index_yacc_uses lexbuf;
      }
  | "%%"  { lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 2; }
  | eof   { () }
  | _     { index_yacc_ident lexbuf })]
)Code(19299,
 [
LexCode(and index_yacc_uses = parse 
  | space* "|"? space* identifier space*
      {)CamlCode(
	let str = from_string (lexeme lexbuf) in
	let token = enleve_blanc_pipe_dp str in
	(* add to the index *)
	let loc = { Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) }
	in
	  if (token != "error")
	  then 
	    if Stringset.mem token !token_table
	    then
	      add_uses loc Token token
	    else add_uses loc YaccEP token;
	  index_yacc_uses lexbuf;
      }
  | "{"   { lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 1; }
  | "%%"  { lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 2; }
  | eof   { () }
  | _     { index_yacc_uses lexbuf })]
)Code(19299,
 [
LexCode(and index_yacc_token = parse
  | space* identifier space*
      {)CamlCode(
	let lxb = from_string(lexeme lexbuf) in
	let token = enleve_blanc_pipe_dp lxb in
	let loc = { Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) } 
	in
	  add_def loc Token token;
	  token_table := Stringset.add token !token_table;
	  index_yacc_token lexbuf; (* return to caller *)
      }
  | "/*"  { ignore_yacc_comments lexbuf; index_yacc_token lexbuf; }
  | "\n"  { ()  }
  | "<"   { index_yacc_type lexbuf; index_yacc_token lexbuf; }
  | eof   { () }
  | _     { index_yacc_token lexbuf })]
)Code(19299,
 [
LexCode(and index_yacc_type = parse (* VIRER LES TYPES DE BASE *)
  | space* identifier space*
      {)CamlCode(
	let lxb = from_string(lexeme lexbuf) in
	let token = enleve_blanc_pipe_dp lxb in
	let loc = { Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) }
	in
	  add_def loc Type token;
	  index_yacc_type lexbuf; (* return to caller *)
      }
  | "\n"  { () }
  | "(*"  { incr comment_cpt ; ignore_caml_comments lexbuf; index_yacc_type lexbuf; }
  | ">"   { () }
  | eof   { () }
  | _     { index_yacc_type lexbuf })]
)Code(19299,
 [
LexCode((* here we need too know how many "(*" we met. *)
and caml_braces = parse
  | "{"   {)CamlCode( incr brace_cpt; Buffer.add_char camlb '{' ; caml_braces lexbuf; }
  | "}"
      {
	decr brace_cpt;
	(if !brace_cpt = 0 
	then 
	  begin
	    let str = Buffer.contents camlb in
	    let action = skip_dollar str in 
	    let lexbuf = Lexing.from_string action in
	      try
		tr_structure (Parse.implementation lexbuf);
	      with 
		  Syntaxerr.Error _ 
		| Syntaxerr.Escape_error 
		| Lexer.Error _ -> 
		      begin
			if not !quiet 
			then
			  eprintf " ** warning: syntax error while parsing the action %s)\n" str; 
		      end
	  end
	else 
	  begin
	    Buffer.add_char camlb '}';
	    caml_braces lexbuf; 
	  end);
	in_action := false; (* we are leaving an action *)
      }
  | "(*"  { incr comment_cpt ; ignore_caml_comments lexbuf; caml_braces lexbuf; }
  | eof   { () }
  | _     { Buffer.add_string camlb (lexeme lexbuf) ; caml_braces lexbuf;  })]
)Code(19299,
 [
LexCode(and header_braces = parse
  | "%}"   
      {)CamlCode(
	let str = Buffer.contents camlb in
	let lexbuf = Lexing.from_string str in
	  (try
	    tr_structure (Parse.implementation lexbuf);
	  with 
	      Syntaxerr.Error _ 
	    | Syntaxerr.Escape_error 
	    | Lexer.Error _ -> 
		begin
		  if not !quiet 
		  then
		    eprintf " ** warning: syntax error while parsing the header %s)\n" str; 
		end);
	  in_action := false; (* we are leaving an action *))]
)Code(19299,
 [
LexCode(      }
  | "(*"  {)CamlCode( incr comment_cpt ; ignore_caml_comments lexbuf; header_braces lexbuf; }
  | eof   { () }
  | _     { Buffer.add_string camlb (lexeme lexbuf) ; header_braces lexbuf; })]
)Code(19299,
 [
LexCode(and caml_trailer = parse
  | eof   
      {)CamlCode(
 	let str = Buffer.contents camlb in
	let lexbuf = Lexing.from_string str in
	  try
	    tr_structure (Parse.implementation lexbuf);
	  with 
	      Syntaxerr.Error _ 
	    | Syntaxerr.Escape_error 
	    | Lexer.Error _ -> 
		begin
		  if not !quiet 
		  then
		    eprintf " ** warning: syntax error while parsing the header %s)\n" str; 
		end
      }
  | "(*"  { incr comment_cpt ; ignore_caml_comments lexbuf; caml_trailer lexbuf; }
  | _     { Buffer.add_string camlb (lexeme lexbuf) ; caml_trailer lexbuf; })]
)Code(19299,
 [
LexCode(and ignore_caml_comments = parse 
  | "(*" {)CamlCode( incr comment_cpt ; ignore_caml_comments lexbuf; }
  | "*)" {
      decr comment_cpt;
      if (!comment_cpt = 0)
      then ()
      else ignore_caml_comments lexbuf;
	 }
  | eof  { () }
  | _    { ignore_caml_comments lexbuf; })]
)Code(19299,
 [
LexCode(and ignore_yacc_comments = parse
  | "*/" 
  | eof  {)CamlCode( () }
  | _    { ignore_yacc_comments lexbuf; })]
)Code(19299,
 [
LexCode(and ignore_regexpr = parse
  "{"   {)CamlCode( lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 1; }
(* ignorer le "" car pb si l'utilis. met "{" dans les regles *)
  | "\"" [^'"']* "\""
  | "'" [^''']* "'"  { ignore_regexpr lexbuf; }
(* chercher les utilisation de reg.expr *)
  | "(*"  { incr comment_cpt ; ignore_caml_comments lexbuf; ignore_regexpr lexbuf; }
  | eof   { () }
  | identifier 
      {   
      	(* add to the index *)
	let entry_pt = lexeme lexbuf in
	let loc = { Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) } in
	  add_uses loc RegExpr entry_pt;
	ignore_regexpr lexbuf;
      } 
  | _     { 
      prerr_string(lexeme lexbuf);
      ignore_regexpr lexbuf; })]
)Code(19299,
 [
CamlCode(
and get_lex_defs = parse
  | "rule" { lexbuf.lex_curr_pos <-  lexbuf.lex_curr_pos - 4; }
  | "let"  { get_lex_defs lexbuf; } (* pour dimin. la taille autom => regle suiv. *)
  | identifier 
      {   
      	(* add to the index *)
	let entry_pt = lexeme lexbuf in
	let loc = { Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) } in
	  add_def loc RegExpr entry_pt;
	get_lex_defs lexbuf;
      } 
  | "'" [^'\'']*  "'"
  | "\"" [^'"']*  "\""
      { get_lex_defs lexbuf; }
  | "(*"   { incr comment_cpt ; ignore_caml_comments lexbuf; get_lex_defs lexbuf; }
  | eof    { () }
  | _      { get_lex_defs lexbuf; })]
)Code(19299,
 [
LexCode(and enleve_blanc_pipe_dp = parse
  | "|" | ":"
  | space*     {)CamlCode( enleve_blanc_pipe_dp lexbuf; }
  | identifier { lexeme lexbuf; })]
)Code(19299,
 [
LexCode((* TRAILER *)
{)]
)]
}{
 sec_beg = 26317 ; 
 sec_contents = 
[
Documentation( Given all that collecting functions, we can now define two functions
    [cross_implem] and [cross_interf] which respectively compute the 
    cross-references in implementations and interfaces.)Documentation(BUG2 : NON CORRIGE, si la premiere section est definie a la main, juste
apres les 2 commentaires ignores, alors pour le module la position 0
implique que le constructeur de l'index ne sait pas a quelle section ca appartient => ZAP 
)Code(26757,
 [
CamlCode(let add_module m = 
  add_def { loc_start = 0; loc_end = 0; loc_ghost = false } Module m)]
)Code(26847,
 [
CamlCode(let wrapper parsing_function traverse_function f m =
  reset_cross ();
  current_file := f;
  add_module m;
  let c = open_in f in
  let lexbuf = Lexing.from_channel c in
  try
    traverse_function (parsing_function lexbuf);
    close_in c
  with Syntaxerr.Error _ | Syntaxerr.Escape_error | Lexer.Error _ -> begin
    if not !quiet then
      eprintf " ** warning: syntax error while parsing (while making the index of %s)\n" f;
    close_in c
  end)]
)Code(27326,
 [
CamlCode(let cross_implem = wrapper Parse.implementation tr_structure
let cross_interf = wrapper Parse.interface tr_signature)]
)Code(27444,
 [
CamlCode(let cross_lex f m =
  reset_cross ();
  current_file := f;
  add_module m;
  let c = open_in f in
  let lexbuf = Lexing.from_channel c in
    index_lex lexbuf)]
)Code(27605,
 [
CamlCode(let cross_yacc f m =
  reset_cross ();
  current_file := f;
  add_module m;
  let c = open_in f in
  let lexbuf = Lexing.from_channel c in
    index_yacc lexbuf)]
)Code(27768,
 [
CamlCode(
)]
)]
}]
})