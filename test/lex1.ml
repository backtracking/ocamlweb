# 3 "lex1.mll"
 
  open Var;;
  open Exceptions;;
  open Parser;;        (* Le type token est defini dans le module parser.mli *)
  open Printf;;


(*s Pour l'option -dump-tokens *)
let rec print_token = function
  | EOF         -> printf "EOF"
  | PLUS        -> printf "PLUS ; "
  | MOINS       -> printf "MOINS ; "
  | MULT        -> printf "MULT ; "
  | DIV         -> printf "DIV ; "
  | PARENT_G    -> printf "PARENT_G ; "
  | PARENT_D    -> printf "PARENT_D ; "
  | IDENT(s)    -> printf "IDENT(%s) ; " s
  | CSTE(n)     -> printf "CSTE(%d) ; " n
  | CHAINE(s)   -> printf "CHAINE(%s) ; " s
  | TRUE        -> printf "TRUE ; "
  | FALSE       -> printf "FALSE ; "
  | LET         -> printf "LET ; "
  | NOT         -> printf "NOT ; "
  | IN          -> printf "IN ; "
  | REC         -> printf "REC ; "
  | IF          -> printf "IF ; "
  | THEN        -> printf "THEN ; "
  | ELSE        -> printf "ELSE ; "
  | INT         -> printf "INT ; "
  | BOOL        -> printf "BOOL ; "
  | STRING      -> printf "STRING ; "
  | VIRGULE     -> printf "VIRGULE ; "
  | DEUX_POINTS -> printf "DEUX_POINTS ; "
  | ET          -> printf "ET ; "
  | OU          -> printf "OU ; "
  | EXP         -> printf "EXP ; "
  | SUP         -> printf "SUP ; "
  | SUPEGAL     -> printf "SUPEGAL ; "
  | INF         -> printf "INF ; "
  | INFEGAL     -> printf "INFEGAL ; "
  | EGAL        -> printf "EGAL ; "
  | DIFF        -> printf "DIFF ; "
  | LIFULA      -> printf "LIFULA ; "
;;


(*s Crée une table de hachage pour les tokens, cela a pour effet de réduire énormément 
 l'automate de l'analyse lexicale. *)
let keyword_table = Hashtbl.create 29

let _ =
  List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
    [ 
      "let"              , LET    ;
      "not"              , NOT    ;
      "in"               , IN     ;
      "rec"              , REC    ;
      "if"               , IF     ;
      "then"             , THEN   ;
      "else"             , ELSE   ;
      "int"              , INT    ;
      "bool"             , BOOL   ;
      "string"           , STRING ;
      "not"              , NOT    ;
      "true"             , TRUE   ;
      "false"            , FALSE  ;
      "lifula"           , LIFULA ;
    ]
let lex_tables = {
  Lexing.lex_base = 
   "\000\000\113\000\250\255\252\255\001\000\004\000\018\000\251\255\
    \254\255\253\255\003\000\255\255\057\000\231\255\254\255\002\000\
    \058\000\242\255\022\000\244\255\247\255\249\255\252\255\248\255\
    \246\255\077\000\251\255\074\000\250\255\035\000\109\000\243\255\
    \241\255\232\255\221\000\239\255\237\255\236\255\089\000\166\000\
    \233\255\169\000\235\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\005\000\005\000\005\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
    \024\000\255\255\010\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\021\000\255\255\017\000\255\255\015\000\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\021\000\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\013\000\002\000\000\000\000\000\010\000\255\255\255\255\000\000\
    \000\000\000\000\010\000\000\000\255\255\000\000\000\000\255\255\
    \039\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\255\255\039\000\
    \000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\014\000\014\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\015\000\016\000\011\000\000\000\011\000\017\000\000\000\
    \018\000\019\000\020\000\021\000\022\000\023\000\009\000\024\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\026\000\008\000\027\000\028\000\029\000\042\000\
    \009\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\010\000\040\000\012\000\031\000\012\000\
    \035\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\003\000\032\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\036\000\
    \037\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\004\000\034\000\010\000\041\000\000\000\
    \000\000\005\000\000\000\006\000\000\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\010\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \040\000\000\000\000\000\039\000\034\000\000\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\255\255\041\000\255\255\034\000\039\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\039\000\
    \000\000\000\000\000\000\000\000\000\000\039\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \000\000\000\000\255\255\000\000\034\000\000\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\004\000\255\255\010\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\000\000\000\000\000\000\015\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\016\000\004\000\000\000\010\000\
    \029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\000\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\027\000\
    \027\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\001\000\030\000\012\000\016\000\255\255\
    \255\255\001\000\255\255\001\000\255\255\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\012\000\
    \255\255\255\255\255\255\255\255\255\255\012\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \039\000\255\255\255\255\041\000\030\000\255\255\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\004\000\039\000\010\000\034\000\041\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\041\000\
    \255\255\255\255\255\255\255\255\255\255\041\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \255\255\255\255\016\000\255\255\034\000\255\255\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\001\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\039\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255"
}

let rec token lexbuf = token_rec lexbuf 0
and token_rec lexbuf state =
  match Lexing.engine lex_tables state lexbuf with
    0 -> (
# 93 "lex1.mll"
      
      let id = Lexing.lexeme lexbuf in
        (try
           Hashtbl.find keyword_table id
         with Not_found ->
           IDENT(id)) 
    )
  | 1 -> (
# 101 "lex1.mll"
       
 	if (Lexing.lexeme_char lexbuf 0 = '\n')
	then
	  begin
	    incr ligne  ;
	    car := Lexing.lexeme_end lexbuf ;
	  end ;
	  token lexbuf 
      )
  | 2 -> (
# 111 "lex1.mll"
       
 	incr compteur  ; 
	comment lexbuf ;
	token lexbuf 
      )
  | 3 -> (
# 116 "lex1.mll"
                         VIRGULE     )
  | 4 -> (
# 117 "lex1.mll"
                         DEUX_POINTS )
  | 5 -> (
# 118 "lex1.mll"
                         EGAL        )
  | 6 -> (
# 119 "lex1.mll"
                         PLUS        )
  | 7 -> (
# 120 "lex1.mll"
                         MOINS       )
  | 8 -> (
# 121 "lex1.mll"
                         MULT        )
  | 9 -> (
# 122 "lex1.mll"
                         DIV         )
  | 10 -> (
# 123 "lex1.mll"
                         PARENT_G    )
  | 11 -> (
# 124 "lex1.mll"
                         PARENT_D    )
  | 12 -> (
# 125 "lex1.mll"
                         EXP         )
  | 13 -> (
# 126 "lex1.mll"
                         ET          )
  | 14 -> (
# 127 "lex1.mll"
                         OU          )
  | 15 -> (
# 128 "lex1.mll"
                         SUP         )
  | 16 -> (
# 129 "lex1.mll"
                         SUPEGAL     )
  | 17 -> (
# 130 "lex1.mll"
                         INF         )
  | 18 -> (
# 131 "lex1.mll"
                         INFEGAL     )
  | 19 -> (
# 132 "lex1.mll"
                         DIFF        )
  | 20 -> (
# 133 "lex1.mll"
                         DIFF        )
  | 21 -> (
# 135 "lex1.mll"
        
	try 
	  CSTE(int_of_string(Lexing.lexeme lexbuf)) 
	with _ ->
          begin
	    debut := Lexing.lexeme_start lexbuf - !car + 1 ;
	    fin := Lexing.lexeme_end lexbuf - !car + 1 ;
	    let error = Lexer_error(!ligne , !debut , !fin , "Problème lié à l'entier")
 	    in raise error
	  end
      )
  | 22 -> (
# 147 "lex1.mll"
        
	CHAINE(Lexing.lexeme lexbuf) 
      )
  | 23 -> (
# 150 "lex1.mll"
               EOF )
  | 24 -> (
# 152 "lex1.mll"
       
 	debut := Lexing.lexeme_start lexbuf - !car + 1 ;
	fin := Lexing.lexeme_end lexbuf - !car + 1 ;
	let error = Lexer_error(!ligne , !debut , !fin , "token non reconnu") in raise error 
      )
  | n -> lexbuf.Lexing.refill_buff lexbuf; token_rec lexbuf n

and comment lexbuf = comment_rec lexbuf 1
and comment_rec lexbuf state =
  match Lexing.engine lex_tables state lexbuf with
    0 -> (
# 166 "lex1.mll"
        comment lexbuf )
  | 1 -> (
# 168 "lex1.mll"
       
        decr compteur      ;
        if (!compteur <> 0)
	then comment lexbuf
      )
  | 2 -> (
# 174 "lex1.mll"
       
        incr compteur ;
	comment lexbuf
      )
  | 3 -> (
# 179 "lex1.mll"
        
	incr ligne  ;
	car := Lexing.lexeme_end lexbuf ;
	comment lexbuf
      )
  | 4 -> (
# 185 "lex1.mll"
       
        debut := Lexing.lexeme_start lexbuf - !car + 1 ;
	fin := Lexing.lexeme_end lexbuf - !car + 1 ;
	let error = Lexer_error(!ligne , !debut , !fin , "commentaire fermant attendu") in
	  raise error )
  | 5 -> (
# 191 "lex1.mll"
        comment lexbuf )
  | n -> lexbuf.Lexing.refill_buff lexbuf; comment_rec lexbuf n

