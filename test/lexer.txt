Lex({ content_file = lexer.mll ;
 content_name = Lexer ;
 contents_contents =
 [
{
 sec_beg = 0 ; 
 sec_contents = 
[
Code(648,
 [
LexCode({)CamlCode(
  open Lexing
  open Filename
  open Location)]
)Code(697,
 [
CamlCode(let comment_cpt = ref 0)]
)Code(722,
 [
CamlCode(let brace_cpt = ref 0)]
)Code(745,
 [
CamlCode(let camlb = Buffer.create 8192)]
)Code(777,
 [
CamlCode(let token_table = ref Stringset.empty)]
)Code(816,
 [
CamlCode(let rec skip_dollar = function
    "" -> ""
  |str -> 
     let prem = (String.sub str 0 1) in
     let suite = String.sub str 1 ((String.length str)-1) in
       if prem = "$" 
       then " " ^(skip_dollar suite)
       else prem^(skip_dollar suite))]
)Code(1069,
 [
LexCode(})]
)Documentation(regular expressions)Code(1099,
 [
LexCode(let space = [' ' '\t']
let lowercase = ['a'-'z' '\223'-'\246' '\248'-'\255' '_']
let uppercase = ['A'-'Z' '\192'-'\214' '\216'-'\222']
let identchar = ['A'-'Z' 'a'-'z' '_' '\192'-'\214' '\216'-'\246' '\248'-'\255' '\'' '0'-'9']
let identifier = (lowercase | uppercase) identchar*)]
)]
}{
 sec_beg = 1381 ; 
 sec_contents = 
[
Documentation(LEX Analyser)Code(1401,
 [
LexCode(rule index_lex = parse
  | "rule" | "and" 
	{)LexCode( (* look for an identifier name *))]
)Code(1531,
 [
CamlCode(	  index_lex_ident lexbuf;
	  index_lex lexbuf;
	)LexCode(}
  | "let" {)CamlCode( get_lex_defs lexbuf; index_lex lexbuf; )LexCode(}
  | "\""
  | "|"
  | "'"   {)CamlCode( ignore_regexpr lexbuf; index_lex lexbuf; )LexCode(}
  | "{"   {)CamlCode( in_action := true; offset_action := (lexeme_start lexbuf); (* we enter an action *)
	    incr brace_cpt; Buffer.clear camlb; caml_braces lexbuf;
	    index_lex lexbuf; )LexCode(}
  | "(*"  {)CamlCode( incr comment_cpt ; ignore_caml_comments lexbuf; index_lex lexbuf; )LexCode(}
  | eof   {)CamlCode( () )LexCode(}
  | _     {)CamlCode( index_lex lexbuf; )LexCode(}
and index_lex_ident = parse
  | "parse" {)CamlCode( () )LexCode(}
  | identifier
      {)LexCode(
	(* add to the index *)
	let entry_pt = lexeme lexbuf in)]
)Code(2097,
 [
LexCode(	let loc = {)CamlCode( Location.loc_start = lexeme_start lexbuf;
                    Location.loc_end = 0; (* BIDON *)
                    Location.loc_ghost = false (* BIDON *) )LexCode(} in
	  add_def loc LexEP entry_pt;
prerr_endline("add_def  EntryL "^entry_pt);
	index_lex_ident lexbuf;
	  )]
)]
}{
 sec_beg = 2373 ; 
 sec_contents = 
[
Documentation( section sa mere)Code(2392,
 [
LexCode(}
  | "(*" {)CamlCode(  incr comment_cpt ; ignore_caml_comments lexbuf; index_lex_ident lexbuf; )LexCode(}
  | eof  {)CamlCode( () )LexCode(}
  | _    {)CamlCode( index_lex_ident lexbuf; )LexCode(})]
)Code(2544,
 [
LexCode(and enleve_blanc_pipe_dp = parse
  | "|" | ":"
  | space*     {)CamlCode( enleve_blanc_pipe_dp lexbuf; )LexCode(}
  | identifier {)CamlCode( lexeme lexbuf; )LexCode(})]
)Documentation(TRAILER)Code(2688,
 [
LexCode({)]
)]
}{
 sec_beg = 2691 ; 
 sec_contents = 
[
Documentation(Given all that collecting functions, we can now define two functions
    [cross_implem] and [cross_interf] which respectively compute the 
    cross-references in implementations and interfaces.)Documentation(BUG2 : NON CORRIGE, si la premiere section est definie a la main, juste
apres les 2 commentaires ignores, alors pour le module la position 0
implique que le constructeur de l'index ne sait pas a quelle section ca appartient => ZAP 
)Code(3131,
 [
LexCode(let wrapper parsing_function traverse_function f m =
  reset_cross ();
  current_file := f;
  add_module m;
  let c = open_in f in
  let lexbuf = Lexing.from_channel c in
  try
    traverse_function (parsing_function lexbuf);
    close_in c
  with Syntaxerr.Error _ | Syntaxerr.Escape_error | Lexer.Error _ -> begin
    if not !quiet then
      eprintf " ** warning: syntax error while parsing (while making the index of %s)\n" f;
    close_in c
  end)]
)Code(3585,
 [
LexCode(}
)]
)]
}]
})